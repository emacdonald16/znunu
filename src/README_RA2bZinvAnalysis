RA2bZinvAnalysis
Bill Ford
12 July 2018; updated 10 September

RA2bZinvAnalysis is a root macro in C++ that produces the histograms
needed for performing the Z->nunu background measurement in the RA2b
analysis.  It is a reimplementation of parts of Troy's RA2b.py.  The
remaining functions are accomplished by feeding the histograms into
RA2b.py.  The input source is the skims of ntuples produced by
TreeMaker.

What the macro can do now is produce the 174-bin histogram of the
background expectation, including both Z+jets and ttZ MC samples, and
some N-1 plots of the main analysis variables.  It accommodates Kevin
Pedro's recipes for both pileup and BTag scale factor corrections.

The code lives in
https://github.com/wmtford/znunu/blob/master/
Because of the pileup and BTag corrections one also needs Kevin Pedro's
analysis code, in 
https://github.com/kpedro88/Analysis/blob/master/ 

The files needed to run this class are
src/RA2bZinvLoadClasses.C
src/RA2bZinvDriver.C
src/RA2bZinvAnalysis.h
src/RA2bZinvAnalysis.C
src/CCbinning.h
src/CCbinning.C
src/RA2bZinvAnalysis.cfi
src/LeafDeclaration_XXXX.h 
src/YYYY.cfg  (optional)
datFiles/[skim|ntuple]FilesZZZZ.dat

The contents of the tree are different between data and MC, skimmed and
unskimmed samples, and TreeMaker versions.  Therefore, before compiling,
(Un)comment compiler directives at the top of RA2bZinvAnalysis.h to
select: 
data/MC
skim/ntuple
TreeMaker version

Configuration of the RA2bZinvAnalysis instance, beyond that controlled
by the compiler directives, is set via config files RA2bZinvAnalysis.cfi
(for default initialization), plus (filename).cfg for specialization. 

To launch from the command line,
root -l -b RA2bZinvLoadClasses.C RA2bZinvDriver.C

The main source file, RA2bZinvAnalysis.C, defines a singleton class and
some user-callable functions.  Its use is illustrated by the
implementation in RA2bZinvDriver.C.

The constructor takes one required argument, a const char* with the name
of the .cfg file to be used; it can be the empty string "".  The
optional second argument is the name of a runBlock, overriding the value
set in the .cfi or .cfg file (only needed when running parallel jobs on
separate runBlocks).  The .dat file, chosen in the .cfi or .cfg
file, is an index of the names of the TreeMaker ntuple files for each of
the samples.  (The reason for having more than one index file is simply
their size for the raw nutple root file sets.)

Once a fileList (datFiles/*Files*.dat) has been created for a given
TreeMaker version, (un)skimmed, data/MC configuration, one can run
RA2bZinvDriver with a non-empty, compatible sample name as argument to
the runMakeClass method to generate a TreeMkrTemplate_*_*_Vxx.h file.
With a little editing one then embeds the tree-specific information from
this file into LeafDeclaration_*_*_Vxx.h.  See
diff_TreeMkrTemplate_V12.h-LeafDeclaration_V12.h for guidance.  (Someone
with fresh skills in some parsing language will doubtless write a macro
to do this transformation.)

The baseline cuts are defined as a TCut string built in the getCuts
method.  To lift one or more cuts in making N-1 histograms, or to impose
additional cuts, one needs to associate the specific cut string(s) found
in getCuts with a class variable.  This variable will then be referenced
by code one would add to the makeHistograms method.

